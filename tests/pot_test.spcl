box_len = 100

# convert from nm to simulation length units
fn convert_len = (l) {
    return l / box_len;
}
# convert from eV*ns^2/nm^2 to simulation mass units
fn convert_mass = (m) {
    return m / box_len^2;
}

fn ensemble = (p_num, p_mass, p_in_temp, p_e_per_bs) {
    return {
	__type__ = "ensemble";
	num = p_num;
	mass = convert_mass(p_mass);
	in_temp = p_in_temp;
	e_per_bs = p_e_per_bs;
    }
}

fn hard_sphere_int = (r0, p_ene_0) {
    return {__type__ = "hard_sphere_int"; r_sq_max = convert_len(r0)^2; ene_0 = p_ene_0}
}

fn lj_int = (r0, sigma, epsilon) {
    # convert units;
    r0 = convert_len(r0);
    sigma = convert_len(sigma);

    # convert r->R^2. Calculate the parameters A=4*epsilon*sigma^12, B = 4*epsilon*sigma^6, offset = A/R^12 - B/R^6;
    sigma_6 = sigma^6;
    p_a = 4*epsilon*(sigma_6^2);
    p_b = 4*epsilon*sigma_6;
    p_ene_0 = p_a/r0^12 - p_b/r0^6;
    return {__type__ = "lj_int"; r_sq_max = r0^2; a = p_a; b = p_b; ene_0 = p_ene_0};
}

## Create a linear trap
# k: the steepness (in Gauss per nm) along the x and y axes. The z axis has a steepness 2*k.
fn lin_pot = (p_kx, p_ky, p_kz) {
    return {__type__ = "lin_pot"; k_x = p_kx^2; k_y = p_ky^2; k_z = p_kz^2}
}

# Create a quadropole trap
# k: the steepness (in Gauss per nm) along the x and y axes. The z axis has a steepness 2*k.
fn quad_pot = (p_k) {
    return {__type__ = "quad_pot"; k = box_len/p_k}
}

# Create a Joffe-Pritchard trap
# k: the steepness (in Gauss per nm) along the x and y axes. The z axis has a steepness 2*k.
fn jp_pot = (p_k) {
    return {__type__ = "jp_pot"; k = (box_len/p_k)^2}
}

# Create a Gaussian update rule. Each Monte-Carlo iteration a random point is moved according to a Gaussian with standard deviation step_std
fn gauss_update = (p_rad, p_thresholds) {
    return {
	__type__ = "gauss_update";
	rad = convert_len(p_rad);
	thresholds = p_thresholds;
	n_micro = 1;
    }
}

box_len = 2
min_leaf_size = 2
update=gauss_update(3, [0,1])
potential = quad_pot(4)
interaction=hard_sphere_int(5, 6)
rb_87=ensemble(7, 8, 9, vec(1/2,0,-1/2,-2,-1,0,1,2))

assert(update.rad == 1.5);
assert(potential.k == 0.5);
assert(interaction.r_sq_max == 6.25);
assert(interaction.ene_0 == 6);

box_len = 2
potential = jp_pot(3)
interaction = lj_int(1, 2, 3)
rb_87 = ensemble(7, 8, 9, vec(1/2,0,-1/2,-2,-1,0,1,2))
