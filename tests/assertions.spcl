# test defaults read from argv
k1 = (len(sys.argv) > 0 && sys.argv[0] == "f")? 0 : 1.2e-5	#defaults to 1.2e-5 G/nm
box_len = (isdef(box_len))? box_len : 1				#defaults to 1
hs_rad = (isdef(hs_rad))? hs_rad : 0.0157			#defaults to slightly more than 2^-6

# list assignment
foo = [1, 2, 3, 4]
foo[0] = 2
assert(foo[0] == 2)
bar = foo[1] + 1
print("bar = %, foo_1 = %\n", bar, foo[1])
sum = 0
foo = [(sum += f) for f in foo]
assert(sum == 11)

# operations
num_add = +1
assert(num_add == 1)
num_add = 2+1
assert(num_add == 3)
num_add += 2;
assert(num_add == 5)
array_add = vec(1,2,3)+vec(3,2,1)
print("array_add = %\n", array_add)
assert(array_add[0] == 4 && array_add[1] == 4 && array_add[2] == array_add[0])

num_sub = -1
assert(num_sub == -1)
num_sub = 1-2
assert(num_sub == -1)
num_sub -= 1
assert(num_sub == -2)
array_sub = vec(1,2,3)-vec(3,2,1)
print("array_sub = %\n", array_sub)
assert(array_sub[0] == -2 && array_sub[1] == 0 && array_sub[2] == 2)

num_mul = 2*3
assert(num_mul == 6)
num_mul *= 3
assert(num_mul == 18)
array_mul = vec(1,2,3)*vec(3,2,1)
print("array_mul = %\n", array_mul)
assert(array_mul[0] == 3 && array_mul[1] == 4 && array_mul[2] == 3)

num_div = 3/2
assert(num_div == 1.5)
num_div /= 2
assert(num_div == 0.75)
array_div = vec(12,4,1)/vec(3,2,1)
print("array_div = %\n", array_div)
assert(array_div[0] == 4 && array_div[1] == 2 && array_div[2] == 1)

num_exp = 2^3
assert(num_exp == 8)
num_exp ^=2
assert(num_exp == 64)
array_exp = vec(1,2,3)^vec(1,2,3)
print("array_exp = %\n", array_exp)
assert(array_exp[0] == 1 && array_exp[1] == 4 && array_exp[2] == 27)
array_exp ^= 2
print("array_exp = %\n", array_exp)
assert(array_exp[0] == 1 && array_exp[1] == 16 && array_exp[2] == 729)

str_add = "foo"+"bar"
assert(typeof(str_add) != "error")
assert(str_add == "foobar")
str_add += "foo"
assert(str_add == "foobarfoo")
